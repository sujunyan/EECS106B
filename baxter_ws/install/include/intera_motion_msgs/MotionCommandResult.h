// Generated by gencpp from file intera_motion_msgs/MotionCommandResult.msg
// DO NOT EDIT!


#ifndef INTERA_MOTION_MSGS_MESSAGE_MOTIONCOMMANDRESULT_H
#define INTERA_MOTION_MSGS_MESSAGE_MOTIONCOMMANDRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <intera_motion_msgs/TrajectoryAnalysis.h>

namespace intera_motion_msgs
{
template <class ContainerAllocator>
struct MotionCommandResult_
{
  typedef MotionCommandResult_<ContainerAllocator> Type;

  MotionCommandResult_()
    : result(false)
    , errorId()
    , trajectory_analysis()
    , last_successful_waypoint(0)  {
    }
  MotionCommandResult_(const ContainerAllocator& _alloc)
    : result(false)
    , errorId(_alloc)
    , trajectory_analysis(_alloc)
    , last_successful_waypoint(0)  {
  (void)_alloc;
    }



   typedef uint8_t _result_type;
  _result_type result;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _errorId_type;
  _errorId_type errorId;

   typedef  ::intera_motion_msgs::TrajectoryAnalysis_<ContainerAllocator>  _trajectory_analysis_type;
  _trajectory_analysis_type trajectory_analysis;

   typedef int32_t _last_successful_waypoint_type;
  _last_successful_waypoint_type last_successful_waypoint;



  enum {
    HAVE_NOT_REACHED_FIRST_WAYPOINT = -1,
    GENERAL_TRAJECTORY_FAILURE = -2,
  };


  typedef boost::shared_ptr< ::intera_motion_msgs::MotionCommandResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::intera_motion_msgs::MotionCommandResult_<ContainerAllocator> const> ConstPtr;

}; // struct MotionCommandResult_

typedef ::intera_motion_msgs::MotionCommandResult_<std::allocator<void> > MotionCommandResult;

typedef boost::shared_ptr< ::intera_motion_msgs::MotionCommandResult > MotionCommandResultPtr;
typedef boost::shared_ptr< ::intera_motion_msgs::MotionCommandResult const> MotionCommandResultConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::intera_motion_msgs::MotionCommandResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::intera_motion_msgs::MotionCommandResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace intera_motion_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'intera_core_msgs': ['/scratch/shared/baxter_ws/src/intera_common/intera_core_msgs/msg', '/scratch/shared/baxter_ws/devel/share/intera_core_msgs/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'intera_motion_msgs': ['/scratch/shared/baxter_ws/src/intera_common/intera_motion_msgs/msg', '/scratch/shared/baxter_ws/devel/share/intera_motion_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::intera_motion_msgs::MotionCommandResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::intera_motion_msgs::MotionCommandResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::intera_motion_msgs::MotionCommandResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::intera_motion_msgs::MotionCommandResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::intera_motion_msgs::MotionCommandResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::intera_motion_msgs::MotionCommandResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::intera_motion_msgs::MotionCommandResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f7a03b4d34d1c7f003ca02ce0099e3c";
  }

  static const char* value(const ::intera_motion_msgs::MotionCommandResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f7a03b4d34d1c7fULL;
  static const uint64_t static_value2 = 0x003ca02ce0099e3cULL;
};

template<class ContainerAllocator>
struct DataType< ::intera_motion_msgs::MotionCommandResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "intera_motion_msgs/MotionCommandResult";
  }

  static const char* value(const ::intera_motion_msgs::MotionCommandResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::intera_motion_msgs::MotionCommandResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# result\n\
bool result\n\
string errorId\n\
TrajectoryAnalysis trajectory_analysis\n\
\n\
int32 last_successful_waypoint\n\
int32 HAVE_NOT_REACHED_FIRST_WAYPOINT=-1\n\
int32 GENERAL_TRAJECTORY_FAILURE=-2\n\
\n\
\n\
================================================================================\n\
MSG: intera_motion_msgs/TrajectoryAnalysis\n\
# The duration of the reference trajectory, as originally planned\n\
float64 planned_duration\n\
\n\
# The measured duration of the trajectory, as executed\n\
float64 measured_duration\n\
\n\
# Minimum commanded angle during trajectory for each joint\n\
float64[] min_angle_command\n\
\n\
# Maximum commanded angle during trajectory for each joint\n\
float64[] max_angle_command\n\
\n\
# Peak speed command = max(abs(reference velocity)) for each joint\n\
float64[] peak_speed_command\n\
\n\
# Peak accel command = max(abs(reference acceleration)) for each joint\n\
float64[] peak_accel_command\n\
\n\
# Peak jerk command = max(abs(reference jerk)) for each joint\n\
float64[] peak_jerk_command\n\
\n\
# Minimum trajectory time rate observed\n\
float64 min_time_rate\n\
\n\
# Maximium trajectory time rate observed\n\
float64 max_time_rate\n\
\n\
# Max joint position error = max(abs(position error)) for each joint\n\
float64[] max_position_error\n\
\n\
# Max joint velocity error = max(abs(velocity error)) for each joint\n\
float64[] max_velocity_error\n\
";
  }

  static const char* value(const ::intera_motion_msgs::MotionCommandResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::intera_motion_msgs::MotionCommandResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.errorId);
      stream.next(m.trajectory_analysis);
      stream.next(m.last_successful_waypoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotionCommandResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::intera_motion_msgs::MotionCommandResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::intera_motion_msgs::MotionCommandResult_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
    s << indent << "errorId: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.errorId);
    s << indent << "trajectory_analysis: ";
    s << std::endl;
    Printer< ::intera_motion_msgs::TrajectoryAnalysis_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectory_analysis);
    s << indent << "last_successful_waypoint: ";
    Printer<int32_t>::stream(s, indent + "  ", v.last_successful_waypoint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERA_MOTION_MSGS_MESSAGE_MOTIONCOMMANDRESULT_H
