# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from intera_motion_msgs/MotionCommandResult.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import intera_motion_msgs.msg

class MotionCommandResult(genpy.Message):
  _md5sum = "0f7a03b4d34d1c7f003ca02ce0099e3c"
  _type = "intera_motion_msgs/MotionCommandResult"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# result
bool result
string errorId
TrajectoryAnalysis trajectory_analysis

int32 last_successful_waypoint
int32 HAVE_NOT_REACHED_FIRST_WAYPOINT=-1
int32 GENERAL_TRAJECTORY_FAILURE=-2


================================================================================
MSG: intera_motion_msgs/TrajectoryAnalysis
# The duration of the reference trajectory, as originally planned
float64 planned_duration

# The measured duration of the trajectory, as executed
float64 measured_duration

# Minimum commanded angle during trajectory for each joint
float64[] min_angle_command

# Maximum commanded angle during trajectory for each joint
float64[] max_angle_command

# Peak speed command = max(abs(reference velocity)) for each joint
float64[] peak_speed_command

# Peak accel command = max(abs(reference acceleration)) for each joint
float64[] peak_accel_command

# Peak jerk command = max(abs(reference jerk)) for each joint
float64[] peak_jerk_command

# Minimum trajectory time rate observed
float64 min_time_rate

# Maximium trajectory time rate observed
float64 max_time_rate

# Max joint position error = max(abs(position error)) for each joint
float64[] max_position_error

# Max joint velocity error = max(abs(velocity error)) for each joint
float64[] max_velocity_error
"""
  # Pseudo-constants
  HAVE_NOT_REACHED_FIRST_WAYPOINT = -1
  GENERAL_TRAJECTORY_FAILURE = -2

  __slots__ = ['result','errorId','trajectory_analysis','last_successful_waypoint']
  _slot_types = ['bool','string','intera_motion_msgs/TrajectoryAnalysis','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result,errorId,trajectory_analysis,last_successful_waypoint

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotionCommandResult, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = False
      if self.errorId is None:
        self.errorId = ''
      if self.trajectory_analysis is None:
        self.trajectory_analysis = intera_motion_msgs.msg.TrajectoryAnalysis()
      if self.last_successful_waypoint is None:
        self.last_successful_waypoint = 0
    else:
      self.result = False
      self.errorId = ''
      self.trajectory_analysis = intera_motion_msgs.msg.TrajectoryAnalysis()
      self.last_successful_waypoint = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.result))
      _x = self.errorId
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2d().pack(_x.trajectory_analysis.planned_duration, _x.trajectory_analysis.measured_duration))
      length = len(self.trajectory_analysis.min_angle_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.trajectory_analysis.min_angle_command))
      length = len(self.trajectory_analysis.max_angle_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.trajectory_analysis.max_angle_command))
      length = len(self.trajectory_analysis.peak_speed_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.trajectory_analysis.peak_speed_command))
      length = len(self.trajectory_analysis.peak_accel_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.trajectory_analysis.peak_accel_command))
      length = len(self.trajectory_analysis.peak_jerk_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.trajectory_analysis.peak_jerk_command))
      _x = self
      buff.write(_get_struct_2d().pack(_x.trajectory_analysis.min_time_rate, _x.trajectory_analysis.max_time_rate))
      length = len(self.trajectory_analysis.max_position_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.trajectory_analysis.max_position_error))
      length = len(self.trajectory_analysis.max_velocity_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.trajectory_analysis.max_velocity_error))
      buff.write(_get_struct_i().pack(self.last_successful_waypoint))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.trajectory_analysis is None:
        self.trajectory_analysis = intera_motion_msgs.msg.TrajectoryAnalysis()
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.errorId = str[start:end].decode('utf-8')
      else:
        self.errorId = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.trajectory_analysis.planned_duration, _x.trajectory_analysis.measured_duration,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectory_analysis.min_angle_command = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectory_analysis.max_angle_command = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectory_analysis.peak_speed_command = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectory_analysis.peak_accel_command = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectory_analysis.peak_jerk_command = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.trajectory_analysis.min_time_rate, _x.trajectory_analysis.max_time_rate,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectory_analysis.max_position_error = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectory_analysis.max_velocity_error = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.last_successful_waypoint,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.result))
      _x = self.errorId
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2d().pack(_x.trajectory_analysis.planned_duration, _x.trajectory_analysis.measured_duration))
      length = len(self.trajectory_analysis.min_angle_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.trajectory_analysis.min_angle_command.tostring())
      length = len(self.trajectory_analysis.max_angle_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.trajectory_analysis.max_angle_command.tostring())
      length = len(self.trajectory_analysis.peak_speed_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.trajectory_analysis.peak_speed_command.tostring())
      length = len(self.trajectory_analysis.peak_accel_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.trajectory_analysis.peak_accel_command.tostring())
      length = len(self.trajectory_analysis.peak_jerk_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.trajectory_analysis.peak_jerk_command.tostring())
      _x = self
      buff.write(_get_struct_2d().pack(_x.trajectory_analysis.min_time_rate, _x.trajectory_analysis.max_time_rate))
      length = len(self.trajectory_analysis.max_position_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.trajectory_analysis.max_position_error.tostring())
      length = len(self.trajectory_analysis.max_velocity_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.trajectory_analysis.max_velocity_error.tostring())
      buff.write(_get_struct_i().pack(self.last_successful_waypoint))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.trajectory_analysis is None:
        self.trajectory_analysis = intera_motion_msgs.msg.TrajectoryAnalysis()
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.errorId = str[start:end].decode('utf-8')
      else:
        self.errorId = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.trajectory_analysis.planned_duration, _x.trajectory_analysis.measured_duration,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectory_analysis.min_angle_command = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectory_analysis.max_angle_command = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectory_analysis.peak_speed_command = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectory_analysis.peak_accel_command = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectory_analysis.peak_jerk_command = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.trajectory_analysis.min_time_rate, _x.trajectory_analysis.max_time_rate,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectory_analysis.max_position_error = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.trajectory_analysis.max_velocity_error = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (self.last_successful_waypoint,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
