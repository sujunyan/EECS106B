# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from intera_motion_msgs/MotionCommandAction.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import intera_motion_msgs.msg
import actionlib_msgs.msg
import geometry_msgs.msg
import intera_core_msgs.msg
import genpy
import std_msgs.msg

class MotionCommandAction(genpy.Message):
  _md5sum = "18a46e44c764a37465620b7dbef48986"
  _type = "intera_motion_msgs/MotionCommandAction"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

MotionCommandActionGoal action_goal
MotionCommandActionResult action_result
MotionCommandActionFeedback action_feedback

================================================================================
MSG: intera_motion_msgs/MotionCommandActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
MotionCommandGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: intera_motion_msgs/MotionCommandGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Engine command goal
string command
string MOTION_START=start
string MOTION_STOP=stop
string MOTION_GENERATE=generate  # Generate path, but do not run
Trajectory trajectory


================================================================================
MSG: intera_motion_msgs/Trajectory
# Representation of a trajectory used by the engine and motion controller.

# optional label
string label

# Array of joint names that correspond to the waypoint joint_positions
string[] joint_names

# Array of waypoints that comprise the trajectory
Waypoint[] waypoints

# Trajectory level options
TrajectoryOptions trajectory_options
================================================================================
MSG: intera_motion_msgs/Waypoint
# Representation of a waypoint used by the motion controller

# Desired joint positions
# For Cartesian segments, the joint positions are used as nullspace biases
float64[] joint_positions

# Name of the endpoint that is currently active
string active_endpoint

# Cartesian pose
# This is not used in trajectories using joint interpolation
geometry_msgs/PoseStamped pose

# Waypoint specific options
# Default values will be used if not set
# All waypoint options are applied to the segment moving to that waypoint
WaypointOptions options

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: intera_motion_msgs/WaypointOptions
# Optional waypoint label
string label

# Ratio of max allowed joint speed : max planned joint speed (from 0.0 to 1.0)
float64 max_joint_speed_ratio

# Slowdown heuristic is triggered if tracking error exceeds tolerances - radians
float64[] joint_tolerances

# Maximum accelerations for each joint (only for joint paths) - rad/s^2.
float64[] max_joint_accel


###########################################################
# The remaining parameters only apply to Cartesian paths

# Maximum linear speed of endpoint - m/s
float64 max_linear_speed

# Maximum linear acceleration of endpoint - m/s^2
float64 max_linear_accel

# Maximum rotational speed of endpoint - rad/s
float64 max_rotational_speed

# Maximum rotational acceleration of endpoint - rad/s^2
float64 max_rotational_accel

# Used for smoothing corners for continuous motion - m
# The distance from the waypoint to where the curve starts while blending from
# one straight line segment to the next.
# Larger distance:  trajectory passes farther from the waypoint at a higher speed
# Smaller distance:  trajectory passes closer to the waypoint at a lower speed
# Zero distance:  trajectory passes through the waypoint at zero speed
float64 corner_distance

================================================================================
MSG: intera_motion_msgs/TrajectoryOptions
# Trajectory interpolation type
string CARTESIAN=CARTESIAN
string JOINT=JOINT
string interpolation_type

# True if the trajectory uses interaction control, false for position control.
bool interaction_control

# Interaction control parameters
intera_core_msgs/InteractionControlCommand interaction_params

# Allow small joint adjustments at the beginning of Cartesian trajectories.
# Set to false for 'small' motions.
bool nso_start_offset_allowed

# Check the offset at the end of a Cartesian trajectory from the final waypoint nullspace goal.
bool nso_check_end_offset

# Options for the tracking controller:
TrackingOptions tracking_options

# Desired trajectory end time, ROS timestamp
time end_time

# The rate in seconds that the path is interpolated and returned back to the user
# No interpolation will happen if set to zero
float64 path_interpolation_step

================================================================================
MSG: intera_core_msgs/InteractionControlCommand
# Message sets the interaction (impedance/force) control on or off
# It also contains desired cartesian stiffness K, damping D, and force values

Header header
bool      interaction_control_active

## Cartesian Impedance Control Parameters
# Stiffness units are (N/m) for first 3 and (Nm/rad) for second 3 values
float64[] K_impedance
# Force certain directions to have maximum possible impedance for a given pose
bool[] max_impedance
# Damping units are (Ns/m) for first 3 and (Nms/rad) for the second 3 values
float64[] D_impedance
# Joint Nullspace stiffness units are in (Nm/rad) (length == number of joints)
float64[] K_nullspace

## Parameters for force control or impedance control with force limit
# If in force mode, this is the vector of desired forces/torques
# to be regulated in (N) and (Nm)
# If in impedance with force limit mode, this vector specifies the
# magnitude of forces/torques (N and Nm) that the command will not exceed.
float64[] force_command

## Desired frame
geometry_msgs/Pose interaction_frame
string endpoint_name
# True if impedance and force commands are defined in endpoint frame
bool in_endpoint_frame

# Set to true to disable damping during force control. Damping is used
# to slow down robot motion during force control in free space.
# Option included for SDK users to disable damping in force control
bool disable_damping_in_force_control

# Set to true to disable reference resetting. Reference resetting is
# used when interaction parameters change, in order to avoid jumps/jerks.
# Option included for SDK users to disable reference resetting if the
# intention is to change interaction parameters.
bool disable_reference_resetting

## Mode Selection Parameters
# The possible interaction control modes are:
# Impedance mode: implements desired endpoint stiffness and damping.
uint8 IMPEDANCE_MODE=1
# Force mode: applies force/torque in the specified dimensions.
uint8 FORCE_MODE=2
# Impedance with force limit: impedance control while ensuring the commanded
# forces/torques do not exceed force_command.
uint8 IMPEDANCE_WITH_FORCE_LIMIT_MODE=3
# Force with motion bounds: force control while ensuring the current
# pose/velocities do not exceed forceMotionThreshold (currenetly defined in yaml)
uint8 FORCE_WITH_MOTION_LIMIT_MODE=4

# Specifies the interaction control mode for each Cartesian dimension (6)
uint8[] interaction_control_mode

# All 6 values in force and impedance parameter vectors have to be filled,
# If a control mode is not used in a Cartesian dimension,
# the corresponding parameters will be ignored.

## Parameters for Constrained Zero-G Behaviors
# Allow for arbitrary rotational displacements from the current orientation
# for constrained zero-G. Setting 'rotations_for_constrained_zeroG = True'
# will disable the rotational stiffness field which limits rotational
# displacements to +/- 82.5 degree.
# NOTE: it will be only enabled for a stationary reference orientation
bool rotations_for_constrained_zeroG

================================================================================
MSG: intera_motion_msgs/TrackingOptions
# Minimum trajectory tracking time rate:  (default = less than one)
bool     use_min_time_rate
float64  min_time_rate

# Maximum trajectory tracking time rate:  (1.0 = real-time = default)
bool     use_max_time_rate
float64  max_time_rate

# How quickly to change the tracking time rate
bool     use_time_rate_accel
float64  time_rate_accel

# How close (in rad) each joint should be to the final goal
float64[] goal_joint_tolerance

# Settling time after reaching the end of the trajectory
bool     use_goal_time_tolerance
float64  goal_time_tolerance

================================================================================
MSG: intera_motion_msgs/MotionCommandActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
MotionCommandResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: intera_motion_msgs/MotionCommandResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# result
bool result
string errorId
TrajectoryAnalysis trajectory_analysis

int32 last_successful_waypoint
int32 HAVE_NOT_REACHED_FIRST_WAYPOINT=-1
int32 GENERAL_TRAJECTORY_FAILURE=-2


================================================================================
MSG: intera_motion_msgs/TrajectoryAnalysis
# The duration of the reference trajectory, as originally planned
float64 planned_duration

# The measured duration of the trajectory, as executed
float64 measured_duration

# Minimum commanded angle during trajectory for each joint
float64[] min_angle_command

# Maximum commanded angle during trajectory for each joint
float64[] max_angle_command

# Peak speed command = max(abs(reference velocity)) for each joint
float64[] peak_speed_command

# Peak accel command = max(abs(reference acceleration)) for each joint
float64[] peak_accel_command

# Peak jerk command = max(abs(reference jerk)) for each joint
float64[] peak_jerk_command

# Minimum trajectory time rate observed
float64 min_time_rate

# Maximium trajectory time rate observed
float64 max_time_rate

# Max joint position error = max(abs(position error)) for each joint
float64[] max_position_error

# Max joint velocity error = max(abs(velocity error)) for each joint
float64[] max_velocity_error

================================================================================
MSG: intera_motion_msgs/MotionCommandActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
MotionCommandFeedback feedback

================================================================================
MSG: intera_motion_msgs/MotionCommandFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# feedback
MotionStatus status


================================================================================
MSG: intera_motion_msgs/MotionStatus
# motion status
Header header
string motion_status
string current_trajectory
uint32 current_waypoint
uint32 motion_request

string MOTION_IDLE=idle
string MOTION_PENDING=pending
string MOTION_RUNNING=running
string MOTION_DONE=done
string MOTION_PAUSED=paused
string MOTION_PREEMPTED=preempted
string MOTION_ERROR=error
"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['intera_motion_msgs/MotionCommandActionGoal','intera_motion_msgs/MotionCommandActionResult','intera_motion_msgs/MotionCommandActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotionCommandAction, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = intera_motion_msgs.msg.MotionCommandActionGoal()
      if self.action_result is None:
        self.action_result = intera_motion_msgs.msg.MotionCommandActionResult()
      if self.action_feedback is None:
        self.action_feedback = intera_motion_msgs.msg.MotionCommandActionFeedback()
    else:
      self.action_goal = intera_motion_msgs.msg.MotionCommandActionGoal()
      self.action_result = intera_motion_msgs.msg.MotionCommandActionResult()
      self.action_feedback = intera_motion_msgs.msg.MotionCommandActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.trajectory.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_goal.goal.trajectory.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.trajectory.waypoints:
        length = len(val1.joint_positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.joint_positions))
        _x = val1.active_endpoint
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v1 = val1.pose
        _v2 = _v1.header
        buff.write(_get_struct_I().pack(_v2.seq))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v4 = _v1.pose
        _v5 = _v4.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = _v4.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v7 = val1.options
        _x = _v7.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(_v7.max_joint_speed_ratio))
        length = len(_v7.joint_tolerances)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v7.joint_tolerances))
        length = len(_v7.max_joint_accel)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v7.max_joint_accel))
        _x = _v7
        buff.write(_get_struct_5d().pack(_x.max_linear_speed, _x.max_linear_accel, _x.max_rotational_speed, _x.max_rotational_accel, _x.corner_distance))
      _x = self.action_goal.goal.trajectory.trajectory_options.interpolation_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.action_goal.goal.trajectory.trajectory_options.interaction_control, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.header.seq, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.header.stamp.secs, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.header.stamp.nsecs))
      _x = self.action_goal.goal.trajectory.trajectory_options.interaction_params.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_control_active))
      length = len(self.action_goal.goal.trajectory.trajectory_options.interaction_params.K_impedance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_goal.goal.trajectory.trajectory_options.interaction_params.K_impedance))
      length = len(self.action_goal.goal.trajectory.trajectory_options.interaction_params.max_impedance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.action_goal.goal.trajectory.trajectory_options.interaction_params.max_impedance))
      length = len(self.action_goal.goal.trajectory.trajectory_options.interaction_params.D_impedance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_goal.goal.trajectory.trajectory_options.interaction_params.D_impedance))
      length = len(self.action_goal.goal.trajectory.trajectory_options.interaction_params.K_nullspace)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_goal.goal.trajectory.trajectory_options.interaction_params.K_nullspace))
      length = len(self.action_goal.goal.trajectory.trajectory_options.interaction_params.force_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_goal.goal.trajectory.trajectory_options.interaction_params.force_command))
      _x = self
      buff.write(_get_struct_7d().pack(_x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.position.x, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.position.y, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.position.z, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.orientation.x, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.orientation.y, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.orientation.z, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.orientation.w))
      _x = self.action_goal.goal.trajectory.trajectory_options.interaction_params.endpoint_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.action_goal.goal.trajectory.trajectory_options.interaction_params.in_endpoint_frame, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.disable_damping_in_force_control, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.disable_reference_resetting))
      _x = self.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_control_mode
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4BdBdBd().pack(_x.action_goal.goal.trajectory.trajectory_options.interaction_params.rotations_for_constrained_zeroG, _x.action_goal.goal.trajectory.trajectory_options.nso_start_offset_allowed, _x.action_goal.goal.trajectory.trajectory_options.nso_check_end_offset, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.use_min_time_rate, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.min_time_rate, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.use_max_time_rate, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.max_time_rate, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.use_time_rate_accel, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.time_rate_accel))
      length = len(self.action_goal.goal.trajectory.trajectory_options.tracking_options.goal_joint_tolerance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_goal.goal.trajectory.trajectory_options.tracking_options.goal_joint_tolerance))
      _x = self
      buff.write(_get_struct_Bd2Id3I().pack(_x.action_goal.goal.trajectory.trajectory_options.tracking_options.use_goal_time_tolerance, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.goal_time_tolerance, _x.action_goal.goal.trajectory.trajectory_options.end_time.secs, _x.action_goal.goal.trajectory.trajectory_options.end_time.nsecs, _x.action_goal.goal.trajectory.trajectory_options.path_interpolation_step, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_result.result.result))
      _x = self.action_result.result.errorId
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2d().pack(_x.action_result.result.trajectory_analysis.planned_duration, _x.action_result.result.trajectory_analysis.measured_duration))
      length = len(self.action_result.result.trajectory_analysis.min_angle_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_result.result.trajectory_analysis.min_angle_command))
      length = len(self.action_result.result.trajectory_analysis.max_angle_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_result.result.trajectory_analysis.max_angle_command))
      length = len(self.action_result.result.trajectory_analysis.peak_speed_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_result.result.trajectory_analysis.peak_speed_command))
      length = len(self.action_result.result.trajectory_analysis.peak_accel_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_result.result.trajectory_analysis.peak_accel_command))
      length = len(self.action_result.result.trajectory_analysis.peak_jerk_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_result.result.trajectory_analysis.peak_jerk_command))
      _x = self
      buff.write(_get_struct_2d().pack(_x.action_result.result.trajectory_analysis.min_time_rate, _x.action_result.result.trajectory_analysis.max_time_rate))
      length = len(self.action_result.result.trajectory_analysis.max_position_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_result.result.trajectory_analysis.max_position_error))
      length = len(self.action_result.result.trajectory_analysis.max_velocity_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_result.result.trajectory_analysis.max_velocity_error))
      _x = self
      buff.write(_get_struct_i3I().pack(_x.action_result.result.last_successful_waypoint, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_feedback.feedback.status.header.seq, _x.action_feedback.feedback.status.header.stamp.secs, _x.action_feedback.feedback.status.header.stamp.nsecs))
      _x = self.action_feedback.feedback.status.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_feedback.feedback.status.motion_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_feedback.feedback.status.current_trajectory
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.feedback.status.current_waypoint, _x.action_feedback.feedback.status.motion_request))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.action_goal is None:
        self.action_goal = intera_motion_msgs.msg.MotionCommandActionGoal()
      if self.action_result is None:
        self.action_result = intera_motion_msgs.msg.MotionCommandActionResult()
      if self.action_feedback is None:
        self.action_feedback = intera_motion_msgs.msg.MotionCommandActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.command = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.command = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.trajectory.label = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.trajectory.label = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_goal.goal.trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.trajectory.waypoints = []
      for i in range(0, length):
        val1 = intera_motion_msgs.msg.Waypoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.joint_positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.active_endpoint = str[start:end].decode('utf-8')
        else:
          val1.active_endpoint = str[start:end]
        _v8 = val1.pose
        _v9 = _v8.header
        start = end
        end += 4
        (_v9.seq,) = _get_struct_I().unpack(str[start:end])
        _v10 = _v9.stamp
        _x = _v10
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v9.frame_id = str[start:end].decode('utf-8')
        else:
          _v9.frame_id = str[start:end]
        _v11 = _v8.pose
        _v12 = _v11.position
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v13 = _v11.orientation
        _x = _v13
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v14 = val1.options
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v14.label = str[start:end].decode('utf-8')
        else:
          _v14.label = str[start:end]
        start = end
        end += 8
        (_v14.max_joint_speed_ratio,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v14.joint_tolerances = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v14.max_joint_accel = struct.unpack(pattern, str[start:end])
        _x = _v14
        start = end
        end += 40
        (_x.max_linear_speed, _x.max_linear_accel, _x.max_rotational_speed, _x.max_rotational_accel, _x.corner_distance,) = _get_struct_5d().unpack(str[start:end])
        self.action_goal.goal.trajectory.waypoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.trajectory.trajectory_options.interpolation_type = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.trajectory.trajectory_options.interpolation_type = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.action_goal.goal.trajectory.trajectory_options.interaction_control, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.header.seq, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.header.stamp.secs, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.action_goal.goal.trajectory.trajectory_options.interaction_control = bool(self.action_goal.goal.trajectory.trajectory_options.interaction_control)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.trajectory.trajectory_options.interaction_params.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.trajectory.trajectory_options.interaction_params.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_control_active,) = _get_struct_B().unpack(str[start:end])
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_control_active = bool(self.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_control_active)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.K_impedance = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.max_impedance = struct.unpack(pattern, str[start:end])
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.max_impedance = map(bool, self.action_goal.goal.trajectory.trajectory_options.interaction_params.max_impedance)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.D_impedance = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.K_nullspace = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.force_command = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 56
      (_x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.position.x, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.position.y, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.position.z, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.orientation.x, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.orientation.y, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.orientation.z, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.trajectory.trajectory_options.interaction_params.endpoint_name = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.trajectory.trajectory_options.interaction_params.endpoint_name = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.action_goal.goal.trajectory.trajectory_options.interaction_params.in_endpoint_frame, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.disable_damping_in_force_control, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.disable_reference_resetting,) = _get_struct_3B().unpack(str[start:end])
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.in_endpoint_frame = bool(self.action_goal.goal.trajectory.trajectory_options.interaction_params.in_endpoint_frame)
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.disable_damping_in_force_control = bool(self.action_goal.goal.trajectory.trajectory_options.interaction_params.disable_damping_in_force_control)
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.disable_reference_resetting = bool(self.action_goal.goal.trajectory.trajectory_options.interaction_params.disable_reference_resetting)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_control_mode = str[start:end]
      _x = self
      start = end
      end += 30
      (_x.action_goal.goal.trajectory.trajectory_options.interaction_params.rotations_for_constrained_zeroG, _x.action_goal.goal.trajectory.trajectory_options.nso_start_offset_allowed, _x.action_goal.goal.trajectory.trajectory_options.nso_check_end_offset, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.use_min_time_rate, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.min_time_rate, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.use_max_time_rate, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.max_time_rate, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.use_time_rate_accel, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.time_rate_accel,) = _get_struct_4BdBdBd().unpack(str[start:end])
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.rotations_for_constrained_zeroG = bool(self.action_goal.goal.trajectory.trajectory_options.interaction_params.rotations_for_constrained_zeroG)
      self.action_goal.goal.trajectory.trajectory_options.nso_start_offset_allowed = bool(self.action_goal.goal.trajectory.trajectory_options.nso_start_offset_allowed)
      self.action_goal.goal.trajectory.trajectory_options.nso_check_end_offset = bool(self.action_goal.goal.trajectory.trajectory_options.nso_check_end_offset)
      self.action_goal.goal.trajectory.trajectory_options.tracking_options.use_min_time_rate = bool(self.action_goal.goal.trajectory.trajectory_options.tracking_options.use_min_time_rate)
      self.action_goal.goal.trajectory.trajectory_options.tracking_options.use_max_time_rate = bool(self.action_goal.goal.trajectory.trajectory_options.tracking_options.use_max_time_rate)
      self.action_goal.goal.trajectory.trajectory_options.tracking_options.use_time_rate_accel = bool(self.action_goal.goal.trajectory.trajectory_options.tracking_options.use_time_rate_accel)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.trajectory.trajectory_options.tracking_options.goal_joint_tolerance = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 37
      (_x.action_goal.goal.trajectory.trajectory_options.tracking_options.use_goal_time_tolerance, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.goal_time_tolerance, _x.action_goal.goal.trajectory.trajectory_options.end_time.secs, _x.action_goal.goal.trajectory.trajectory_options.end_time.nsecs, _x.action_goal.goal.trajectory.trajectory_options.path_interpolation_step, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_Bd2Id3I().unpack(str[start:end])
      self.action_goal.goal.trajectory.trajectory_options.tracking_options.use_goal_time_tolerance = bool(self.action_goal.goal.trajectory.trajectory_options.tracking_options.use_goal_time_tolerance)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      start = end
      end += 1
      (self.action_result.result.result,) = _get_struct_B().unpack(str[start:end])
      self.action_result.result.result = bool(self.action_result.result.result)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.errorId = str[start:end].decode('utf-8')
      else:
        self.action_result.result.errorId = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.action_result.result.trajectory_analysis.planned_duration, _x.action_result.result.trajectory_analysis.measured_duration,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.trajectory_analysis.min_angle_command = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.trajectory_analysis.max_angle_command = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.trajectory_analysis.peak_speed_command = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.trajectory_analysis.peak_accel_command = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.trajectory_analysis.peak_jerk_command = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.action_result.result.trajectory_analysis.min_time_rate, _x.action_result.result.trajectory_analysis.max_time_rate,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.trajectory_analysis.max_position_error = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.trajectory_analysis.max_velocity_error = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.action_result.result.last_successful_waypoint, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_feedback.feedback.status.header.seq, _x.action_feedback.feedback.status.header.stamp.secs, _x.action_feedback.feedback.status.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.status.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.status.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.status.motion_status = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.status.motion_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.status.current_trajectory = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.status.current_trajectory = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.feedback.status.current_waypoint, _x.action_feedback.feedback.status.motion_request,) = _get_struct_2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.trajectory.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_goal.goal.trajectory.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.trajectory.waypoints:
        length = len(val1.joint_positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.joint_positions.tostring())
        _x = val1.active_endpoint
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v15 = val1.pose
        _v16 = _v15.header
        buff.write(_get_struct_I().pack(_v16.seq))
        _v17 = _v16.stamp
        _x = _v17
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v16.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v18 = _v15.pose
        _v19 = _v18.position
        _x = _v19
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v20 = _v18.orientation
        _x = _v20
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v21 = val1.options
        _x = _v21.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(_v21.max_joint_speed_ratio))
        length = len(_v21.joint_tolerances)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v21.joint_tolerances.tostring())
        length = len(_v21.max_joint_accel)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v21.max_joint_accel.tostring())
        _x = _v21
        buff.write(_get_struct_5d().pack(_x.max_linear_speed, _x.max_linear_accel, _x.max_rotational_speed, _x.max_rotational_accel, _x.corner_distance))
      _x = self.action_goal.goal.trajectory.trajectory_options.interpolation_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.action_goal.goal.trajectory.trajectory_options.interaction_control, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.header.seq, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.header.stamp.secs, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.header.stamp.nsecs))
      _x = self.action_goal.goal.trajectory.trajectory_options.interaction_params.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_control_active))
      length = len(self.action_goal.goal.trajectory.trajectory_options.interaction_params.K_impedance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.trajectory.trajectory_options.interaction_params.K_impedance.tostring())
      length = len(self.action_goal.goal.trajectory.trajectory_options.interaction_params.max_impedance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.action_goal.goal.trajectory.trajectory_options.interaction_params.max_impedance.tostring())
      length = len(self.action_goal.goal.trajectory.trajectory_options.interaction_params.D_impedance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.trajectory.trajectory_options.interaction_params.D_impedance.tostring())
      length = len(self.action_goal.goal.trajectory.trajectory_options.interaction_params.K_nullspace)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.trajectory.trajectory_options.interaction_params.K_nullspace.tostring())
      length = len(self.action_goal.goal.trajectory.trajectory_options.interaction_params.force_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.trajectory.trajectory_options.interaction_params.force_command.tostring())
      _x = self
      buff.write(_get_struct_7d().pack(_x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.position.x, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.position.y, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.position.z, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.orientation.x, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.orientation.y, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.orientation.z, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.orientation.w))
      _x = self.action_goal.goal.trajectory.trajectory_options.interaction_params.endpoint_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.action_goal.goal.trajectory.trajectory_options.interaction_params.in_endpoint_frame, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.disable_damping_in_force_control, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.disable_reference_resetting))
      _x = self.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_control_mode
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4BdBdBd().pack(_x.action_goal.goal.trajectory.trajectory_options.interaction_params.rotations_for_constrained_zeroG, _x.action_goal.goal.trajectory.trajectory_options.nso_start_offset_allowed, _x.action_goal.goal.trajectory.trajectory_options.nso_check_end_offset, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.use_min_time_rate, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.min_time_rate, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.use_max_time_rate, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.max_time_rate, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.use_time_rate_accel, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.time_rate_accel))
      length = len(self.action_goal.goal.trajectory.trajectory_options.tracking_options.goal_joint_tolerance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.trajectory.trajectory_options.tracking_options.goal_joint_tolerance.tostring())
      _x = self
      buff.write(_get_struct_Bd2Id3I().pack(_x.action_goal.goal.trajectory.trajectory_options.tracking_options.use_goal_time_tolerance, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.goal_time_tolerance, _x.action_goal.goal.trajectory.trajectory_options.end_time.secs, _x.action_goal.goal.trajectory.trajectory_options.end_time.nsecs, _x.action_goal.goal.trajectory.trajectory_options.path_interpolation_step, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_result.result.result))
      _x = self.action_result.result.errorId
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2d().pack(_x.action_result.result.trajectory_analysis.planned_duration, _x.action_result.result.trajectory_analysis.measured_duration))
      length = len(self.action_result.result.trajectory_analysis.min_angle_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_result.result.trajectory_analysis.min_angle_command.tostring())
      length = len(self.action_result.result.trajectory_analysis.max_angle_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_result.result.trajectory_analysis.max_angle_command.tostring())
      length = len(self.action_result.result.trajectory_analysis.peak_speed_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_result.result.trajectory_analysis.peak_speed_command.tostring())
      length = len(self.action_result.result.trajectory_analysis.peak_accel_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_result.result.trajectory_analysis.peak_accel_command.tostring())
      length = len(self.action_result.result.trajectory_analysis.peak_jerk_command)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_result.result.trajectory_analysis.peak_jerk_command.tostring())
      _x = self
      buff.write(_get_struct_2d().pack(_x.action_result.result.trajectory_analysis.min_time_rate, _x.action_result.result.trajectory_analysis.max_time_rate))
      length = len(self.action_result.result.trajectory_analysis.max_position_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_result.result.trajectory_analysis.max_position_error.tostring())
      length = len(self.action_result.result.trajectory_analysis.max_velocity_error)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_result.result.trajectory_analysis.max_velocity_error.tostring())
      _x = self
      buff.write(_get_struct_i3I().pack(_x.action_result.result.last_successful_waypoint, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_feedback.feedback.status.header.seq, _x.action_feedback.feedback.status.header.stamp.secs, _x.action_feedback.feedback.status.header.stamp.nsecs))
      _x = self.action_feedback.feedback.status.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_feedback.feedback.status.motion_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_feedback.feedback.status.current_trajectory
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.feedback.status.current_waypoint, _x.action_feedback.feedback.status.motion_request))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.action_goal is None:
        self.action_goal = intera_motion_msgs.msg.MotionCommandActionGoal()
      if self.action_result is None:
        self.action_result = intera_motion_msgs.msg.MotionCommandActionResult()
      if self.action_feedback is None:
        self.action_feedback = intera_motion_msgs.msg.MotionCommandActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.command = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.command = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.trajectory.label = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.trajectory.label = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_goal.goal.trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.trajectory.waypoints = []
      for i in range(0, length):
        val1 = intera_motion_msgs.msg.Waypoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.joint_positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.active_endpoint = str[start:end].decode('utf-8')
        else:
          val1.active_endpoint = str[start:end]
        _v22 = val1.pose
        _v23 = _v22.header
        start = end
        end += 4
        (_v23.seq,) = _get_struct_I().unpack(str[start:end])
        _v24 = _v23.stamp
        _x = _v24
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v23.frame_id = str[start:end].decode('utf-8')
        else:
          _v23.frame_id = str[start:end]
        _v25 = _v22.pose
        _v26 = _v25.position
        _x = _v26
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v27 = _v25.orientation
        _x = _v27
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v28 = val1.options
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v28.label = str[start:end].decode('utf-8')
        else:
          _v28.label = str[start:end]
        start = end
        end += 8
        (_v28.max_joint_speed_ratio,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v28.joint_tolerances = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v28.max_joint_accel = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _x = _v28
        start = end
        end += 40
        (_x.max_linear_speed, _x.max_linear_accel, _x.max_rotational_speed, _x.max_rotational_accel, _x.corner_distance,) = _get_struct_5d().unpack(str[start:end])
        self.action_goal.goal.trajectory.waypoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.trajectory.trajectory_options.interpolation_type = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.trajectory.trajectory_options.interpolation_type = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.action_goal.goal.trajectory.trajectory_options.interaction_control, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.header.seq, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.header.stamp.secs, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.action_goal.goal.trajectory.trajectory_options.interaction_control = bool(self.action_goal.goal.trajectory.trajectory_options.interaction_control)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.trajectory.trajectory_options.interaction_params.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.trajectory.trajectory_options.interaction_params.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_control_active,) = _get_struct_B().unpack(str[start:end])
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_control_active = bool(self.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_control_active)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.K_impedance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.max_impedance = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.max_impedance = map(bool, self.action_goal.goal.trajectory.trajectory_options.interaction_params.max_impedance)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.D_impedance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.K_nullspace = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.force_command = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 56
      (_x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.position.x, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.position.y, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.position.z, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.orientation.x, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.orientation.y, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.orientation.z, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_frame.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.trajectory.trajectory_options.interaction_params.endpoint_name = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.trajectory.trajectory_options.interaction_params.endpoint_name = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.action_goal.goal.trajectory.trajectory_options.interaction_params.in_endpoint_frame, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.disable_damping_in_force_control, _x.action_goal.goal.trajectory.trajectory_options.interaction_params.disable_reference_resetting,) = _get_struct_3B().unpack(str[start:end])
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.in_endpoint_frame = bool(self.action_goal.goal.trajectory.trajectory_options.interaction_params.in_endpoint_frame)
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.disable_damping_in_force_control = bool(self.action_goal.goal.trajectory.trajectory_options.interaction_params.disable_damping_in_force_control)
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.disable_reference_resetting = bool(self.action_goal.goal.trajectory.trajectory_options.interaction_params.disable_reference_resetting)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.interaction_control_mode = str[start:end]
      _x = self
      start = end
      end += 30
      (_x.action_goal.goal.trajectory.trajectory_options.interaction_params.rotations_for_constrained_zeroG, _x.action_goal.goal.trajectory.trajectory_options.nso_start_offset_allowed, _x.action_goal.goal.trajectory.trajectory_options.nso_check_end_offset, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.use_min_time_rate, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.min_time_rate, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.use_max_time_rate, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.max_time_rate, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.use_time_rate_accel, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.time_rate_accel,) = _get_struct_4BdBdBd().unpack(str[start:end])
      self.action_goal.goal.trajectory.trajectory_options.interaction_params.rotations_for_constrained_zeroG = bool(self.action_goal.goal.trajectory.trajectory_options.interaction_params.rotations_for_constrained_zeroG)
      self.action_goal.goal.trajectory.trajectory_options.nso_start_offset_allowed = bool(self.action_goal.goal.trajectory.trajectory_options.nso_start_offset_allowed)
      self.action_goal.goal.trajectory.trajectory_options.nso_check_end_offset = bool(self.action_goal.goal.trajectory.trajectory_options.nso_check_end_offset)
      self.action_goal.goal.trajectory.trajectory_options.tracking_options.use_min_time_rate = bool(self.action_goal.goal.trajectory.trajectory_options.tracking_options.use_min_time_rate)
      self.action_goal.goal.trajectory.trajectory_options.tracking_options.use_max_time_rate = bool(self.action_goal.goal.trajectory.trajectory_options.tracking_options.use_max_time_rate)
      self.action_goal.goal.trajectory.trajectory_options.tracking_options.use_time_rate_accel = bool(self.action_goal.goal.trajectory.trajectory_options.tracking_options.use_time_rate_accel)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.trajectory.trajectory_options.tracking_options.goal_joint_tolerance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 37
      (_x.action_goal.goal.trajectory.trajectory_options.tracking_options.use_goal_time_tolerance, _x.action_goal.goal.trajectory.trajectory_options.tracking_options.goal_time_tolerance, _x.action_goal.goal.trajectory.trajectory_options.end_time.secs, _x.action_goal.goal.trajectory.trajectory_options.end_time.nsecs, _x.action_goal.goal.trajectory.trajectory_options.path_interpolation_step, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_Bd2Id3I().unpack(str[start:end])
      self.action_goal.goal.trajectory.trajectory_options.tracking_options.use_goal_time_tolerance = bool(self.action_goal.goal.trajectory.trajectory_options.tracking_options.use_goal_time_tolerance)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      start = end
      end += 1
      (self.action_result.result.result,) = _get_struct_B().unpack(str[start:end])
      self.action_result.result.result = bool(self.action_result.result.result)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.errorId = str[start:end].decode('utf-8')
      else:
        self.action_result.result.errorId = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.action_result.result.trajectory_analysis.planned_duration, _x.action_result.result.trajectory_analysis.measured_duration,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.trajectory_analysis.min_angle_command = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.trajectory_analysis.max_angle_command = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.trajectory_analysis.peak_speed_command = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.trajectory_analysis.peak_accel_command = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.trajectory_analysis.peak_jerk_command = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.action_result.result.trajectory_analysis.min_time_rate, _x.action_result.result.trajectory_analysis.max_time_rate,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.trajectory_analysis.max_position_error = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.trajectory_analysis.max_velocity_error = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.action_result.result.last_successful_waypoint, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_feedback.feedback.status.header.seq, _x.action_feedback.feedback.status.header.stamp.secs, _x.action_feedback.feedback.status.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.status.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.status.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.status.motion_status = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.status.motion_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.status.current_trajectory = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.status.current_trajectory = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.feedback.status.current_waypoint, _x.action_feedback.feedback.status.motion_request,) = _get_struct_2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_Bd2Id3I = None
def _get_struct_Bd2Id3I():
    global _struct_Bd2Id3I
    if _struct_Bd2Id3I is None:
        _struct_Bd2Id3I = struct.Struct("<Bd2Id3I")
    return _struct_Bd2Id3I
_struct_i3I = None
def _get_struct_i3I():
    global _struct_i3I
    if _struct_i3I is None:
        _struct_i3I = struct.Struct("<i3I")
    return _struct_i3I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_4BdBdBd = None
def _get_struct_4BdBdBd():
    global _struct_4BdBdBd
    if _struct_4BdBdBd is None:
        _struct_4BdBdBd = struct.Struct("<4BdBdBd")
    return _struct_4BdBdBd
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
