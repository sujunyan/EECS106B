# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from intera_motion_msgs/WaypointOptions.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WaypointOptions(genpy.Message):
  _md5sum = "1b4687d4e536269b06e629169723339f"
  _type = "intera_motion_msgs/WaypointOptions"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Optional waypoint label
string label

# Ratio of max allowed joint speed : max planned joint speed (from 0.0 to 1.0)
float64 max_joint_speed_ratio

# Slowdown heuristic is triggered if tracking error exceeds tolerances - radians
float64[] joint_tolerances

# Maximum accelerations for each joint (only for joint paths) - rad/s^2.
float64[] max_joint_accel


###########################################################
# The remaining parameters only apply to Cartesian paths

# Maximum linear speed of endpoint - m/s
float64 max_linear_speed

# Maximum linear acceleration of endpoint - m/s^2
float64 max_linear_accel

# Maximum rotational speed of endpoint - rad/s
float64 max_rotational_speed

# Maximum rotational acceleration of endpoint - rad/s^2
float64 max_rotational_accel

# Used for smoothing corners for continuous motion - m
# The distance from the waypoint to where the curve starts while blending from
# one straight line segment to the next.
# Larger distance:  trajectory passes farther from the waypoint at a higher speed
# Smaller distance:  trajectory passes closer to the waypoint at a lower speed
# Zero distance:  trajectory passes through the waypoint at zero speed
float64 corner_distance
"""
  __slots__ = ['label','max_joint_speed_ratio','joint_tolerances','max_joint_accel','max_linear_speed','max_linear_accel','max_rotational_speed','max_rotational_accel','corner_distance']
  _slot_types = ['string','float64','float64[]','float64[]','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       label,max_joint_speed_ratio,joint_tolerances,max_joint_accel,max_linear_speed,max_linear_accel,max_rotational_speed,max_rotational_accel,corner_distance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WaypointOptions, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.label is None:
        self.label = ''
      if self.max_joint_speed_ratio is None:
        self.max_joint_speed_ratio = 0.
      if self.joint_tolerances is None:
        self.joint_tolerances = []
      if self.max_joint_accel is None:
        self.max_joint_accel = []
      if self.max_linear_speed is None:
        self.max_linear_speed = 0.
      if self.max_linear_accel is None:
        self.max_linear_accel = 0.
      if self.max_rotational_speed is None:
        self.max_rotational_speed = 0.
      if self.max_rotational_accel is None:
        self.max_rotational_accel = 0.
      if self.corner_distance is None:
        self.corner_distance = 0.
    else:
      self.label = ''
      self.max_joint_speed_ratio = 0.
      self.joint_tolerances = []
      self.max_joint_accel = []
      self.max_linear_speed = 0.
      self.max_linear_accel = 0.
      self.max_rotational_speed = 0.
      self.max_rotational_accel = 0.
      self.corner_distance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_d().pack(self.max_joint_speed_ratio))
      length = len(self.joint_tolerances)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.joint_tolerances))
      length = len(self.max_joint_accel)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.max_joint_accel))
      _x = self
      buff.write(_get_struct_5d().pack(_x.max_linear_speed, _x.max_linear_accel, _x.max_rotational_speed, _x.max_rotational_accel, _x.corner_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8')
      else:
        self.label = str[start:end]
      start = end
      end += 8
      (self.max_joint_speed_ratio,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.joint_tolerances = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.max_joint_accel = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 40
      (_x.max_linear_speed, _x.max_linear_accel, _x.max_rotational_speed, _x.max_rotational_accel, _x.corner_distance,) = _get_struct_5d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_d().pack(self.max_joint_speed_ratio))
      length = len(self.joint_tolerances)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_tolerances.tostring())
      length = len(self.max_joint_accel)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.max_joint_accel.tostring())
      _x = self
      buff.write(_get_struct_5d().pack(_x.max_linear_speed, _x.max_linear_accel, _x.max_rotational_speed, _x.max_rotational_accel, _x.corner_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8')
      else:
        self.label = str[start:end]
      start = end
      end += 8
      (self.max_joint_speed_ratio,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.joint_tolerances = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.max_joint_accel = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 40
      (_x.max_linear_speed, _x.max_linear_accel, _x.max_rotational_speed, _x.max_rotational_accel, _x.corner_distance,) = _get_struct_5d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
