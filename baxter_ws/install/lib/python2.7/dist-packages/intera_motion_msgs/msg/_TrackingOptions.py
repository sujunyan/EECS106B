# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from intera_motion_msgs/TrackingOptions.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TrackingOptions(genpy.Message):
  _md5sum = "9db39097326cca64edfc125c068ee82f"
  _type = "intera_motion_msgs/TrackingOptions"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Minimum trajectory tracking time rate:  (default = less than one)
bool     use_min_time_rate
float64  min_time_rate

# Maximum trajectory tracking time rate:  (1.0 = real-time = default)
bool     use_max_time_rate
float64  max_time_rate

# How quickly to change the tracking time rate
bool     use_time_rate_accel
float64  time_rate_accel

# How close (in rad) each joint should be to the final goal
float64[] goal_joint_tolerance

# Settling time after reaching the end of the trajectory
bool     use_goal_time_tolerance
float64  goal_time_tolerance
"""
  __slots__ = ['use_min_time_rate','min_time_rate','use_max_time_rate','max_time_rate','use_time_rate_accel','time_rate_accel','goal_joint_tolerance','use_goal_time_tolerance','goal_time_tolerance']
  _slot_types = ['bool','float64','bool','float64','bool','float64','float64[]','bool','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       use_min_time_rate,min_time_rate,use_max_time_rate,max_time_rate,use_time_rate_accel,time_rate_accel,goal_joint_tolerance,use_goal_time_tolerance,goal_time_tolerance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrackingOptions, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.use_min_time_rate is None:
        self.use_min_time_rate = False
      if self.min_time_rate is None:
        self.min_time_rate = 0.
      if self.use_max_time_rate is None:
        self.use_max_time_rate = False
      if self.max_time_rate is None:
        self.max_time_rate = 0.
      if self.use_time_rate_accel is None:
        self.use_time_rate_accel = False
      if self.time_rate_accel is None:
        self.time_rate_accel = 0.
      if self.goal_joint_tolerance is None:
        self.goal_joint_tolerance = []
      if self.use_goal_time_tolerance is None:
        self.use_goal_time_tolerance = False
      if self.goal_time_tolerance is None:
        self.goal_time_tolerance = 0.
    else:
      self.use_min_time_rate = False
      self.min_time_rate = 0.
      self.use_max_time_rate = False
      self.max_time_rate = 0.
      self.use_time_rate_accel = False
      self.time_rate_accel = 0.
      self.goal_joint_tolerance = []
      self.use_goal_time_tolerance = False
      self.goal_time_tolerance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BdBdBd().pack(_x.use_min_time_rate, _x.min_time_rate, _x.use_max_time_rate, _x.max_time_rate, _x.use_time_rate_accel, _x.time_rate_accel))
      length = len(self.goal_joint_tolerance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal_joint_tolerance))
      _x = self
      buff.write(_get_struct_Bd().pack(_x.use_goal_time_tolerance, _x.goal_time_tolerance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.use_min_time_rate, _x.min_time_rate, _x.use_max_time_rate, _x.max_time_rate, _x.use_time_rate_accel, _x.time_rate_accel,) = _get_struct_BdBdBd().unpack(str[start:end])
      self.use_min_time_rate = bool(self.use_min_time_rate)
      self.use_max_time_rate = bool(self.use_max_time_rate)
      self.use_time_rate_accel = bool(self.use_time_rate_accel)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal_joint_tolerance = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 9
      (_x.use_goal_time_tolerance, _x.goal_time_tolerance,) = _get_struct_Bd().unpack(str[start:end])
      self.use_goal_time_tolerance = bool(self.use_goal_time_tolerance)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BdBdBd().pack(_x.use_min_time_rate, _x.min_time_rate, _x.use_max_time_rate, _x.max_time_rate, _x.use_time_rate_accel, _x.time_rate_accel))
      length = len(self.goal_joint_tolerance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal_joint_tolerance.tostring())
      _x = self
      buff.write(_get_struct_Bd().pack(_x.use_goal_time_tolerance, _x.goal_time_tolerance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.use_min_time_rate, _x.min_time_rate, _x.use_max_time_rate, _x.max_time_rate, _x.use_time_rate_accel, _x.time_rate_accel,) = _get_struct_BdBdBd().unpack(str[start:end])
      self.use_min_time_rate = bool(self.use_min_time_rate)
      self.use_max_time_rate = bool(self.use_max_time_rate)
      self.use_time_rate_accel = bool(self.use_time_rate_accel)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal_joint_tolerance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 9
      (_x.use_goal_time_tolerance, _x.goal_time_tolerance,) = _get_struct_Bd().unpack(str[start:end])
      self.use_goal_time_tolerance = bool(self.use_goal_time_tolerance)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bd = None
def _get_struct_Bd():
    global _struct_Bd
    if _struct_Bd is None:
        _struct_Bd = struct.Struct("<Bd")
    return _struct_Bd
_struct_BdBdBd = None
def _get_struct_BdBdBd():
    global _struct_BdBdBd
    if _struct_BdBdBd is None:
        _struct_BdBdBd = struct.Struct("<BdBdBd")
    return _struct_BdBdBd
