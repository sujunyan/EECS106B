// Auto-generated. Do not edit!

// (in-package intera_core_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class CalibrationCommandResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.result = null;
      this.statusId = null;
    }
    else {
      if (initObj.hasOwnProperty('result')) {
        this.result = initObj.result
      }
      else {
        this.result = false;
      }
      if (initObj.hasOwnProperty('statusId')) {
        this.statusId = initObj.statusId
      }
      else {
        this.statusId = '';
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type CalibrationCommandResult
    // Serialize message field [result]
    bufferOffset = _serializer.bool(obj.result, buffer, bufferOffset);
    // Serialize message field [statusId]
    bufferOffset = _serializer.string(obj.statusId, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type CalibrationCommandResult
    let len;
    let data = new CalibrationCommandResult(null);
    // Deserialize message field [result]
    data.result = _deserializer.bool(buffer, bufferOffset);
    // Deserialize message field [statusId]
    data.statusId = _deserializer.string(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.statusId.length;
    return length + 5;
  }

  static datatype() {
    // Returns string type for a message object
    return 'intera_core_msgs/CalibrationCommandResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '42762277c2f2777e046b77cebb5b2b55';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # result
    bool result
    string statusId
    # possible values for statusId are:
    string SUCCESS=Success
    string STOPPED=Stopped
    string GENERIC_FAILURE=calibrationFailure
    string INCOMPLETE=incomplete
    string GRIPPER_ON=cannotCalibrateWithGripper
    string TORQUES_EXCEEDED_THRESHOLD=torquesExceededThreshold
    string PLANNER_FAILURE=plannerFailure
    
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new CalibrationCommandResult(null);
    if (msg.result !== undefined) {
      resolved.result = msg.result;
    }
    else {
      resolved.result = false
    }

    if (msg.statusId !== undefined) {
      resolved.statusId = msg.statusId;
    }
    else {
      resolved.statusId = ''
    }

    return resolved;
    }
};

// Constants for message
CalibrationCommandResult.Constants = {
  SUCCESS: 'Success',
  STOPPED: 'Stopped',
  GENERIC_FAILURE: 'calibrationFailure',
  INCOMPLETE: 'incomplete',
  GRIPPER_ON: 'cannotCalibrateWithGripper',
  TORQUES_EXCEEDED_THRESHOLD: 'torquesExceededThreshold',
  PLANNER_FAILURE: 'plannerFailure',
}

module.exports = CalibrationCommandResult;
