// Auto-generated. Do not edit!

// (in-package intera_core_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class CalibrationCommandFeedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.currentState = null;
      this.numberOfPoses = null;
      this.currentPoseNumber = null;
    }
    else {
      if (initObj.hasOwnProperty('currentState')) {
        this.currentState = initObj.currentState
      }
      else {
        this.currentState = '';
      }
      if (initObj.hasOwnProperty('numberOfPoses')) {
        this.numberOfPoses = initObj.numberOfPoses
      }
      else {
        this.numberOfPoses = 0;
      }
      if (initObj.hasOwnProperty('currentPoseNumber')) {
        this.currentPoseNumber = initObj.currentPoseNumber
      }
      else {
        this.currentPoseNumber = 0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type CalibrationCommandFeedback
    // Serialize message field [currentState]
    bufferOffset = _serializer.string(obj.currentState, buffer, bufferOffset);
    // Serialize message field [numberOfPoses]
    bufferOffset = _serializer.uint32(obj.numberOfPoses, buffer, bufferOffset);
    // Serialize message field [currentPoseNumber]
    bufferOffset = _serializer.uint32(obj.currentPoseNumber, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type CalibrationCommandFeedback
    let len;
    let data = new CalibrationCommandFeedback(null);
    // Deserialize message field [currentState]
    data.currentState = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [numberOfPoses]
    data.numberOfPoses = _deserializer.uint32(buffer, bufferOffset);
    // Deserialize message field [currentPoseNumber]
    data.currentPoseNumber = _deserializer.uint32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.currentState.length;
    return length + 12;
  }

  static datatype() {
    // Returns string type for a message object
    return 'intera_core_msgs/CalibrationCommandFeedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'a4e5158c157d9fb03da0faf44b425ee1';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # feedback
    string currentState
    uint32 numberOfPoses
    uint32 currentPoseNumber
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new CalibrationCommandFeedback(null);
    if (msg.currentState !== undefined) {
      resolved.currentState = msg.currentState;
    }
    else {
      resolved.currentState = ''
    }

    if (msg.numberOfPoses !== undefined) {
      resolved.numberOfPoses = msg.numberOfPoses;
    }
    else {
      resolved.numberOfPoses = 0
    }

    if (msg.currentPoseNumber !== undefined) {
      resolved.currentPoseNumber = msg.currentPoseNumber;
    }
    else {
      resolved.currentPoseNumber = 0
    }

    return resolved;
    }
};

module.exports = CalibrationCommandFeedback;
