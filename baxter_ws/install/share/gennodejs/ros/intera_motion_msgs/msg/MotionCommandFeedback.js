// Auto-generated. Do not edit!

// (in-package intera_motion_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let MotionStatus = require('./MotionStatus.js');

//-----------------------------------------------------------

class MotionCommandFeedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.status = null;
    }
    else {
      if (initObj.hasOwnProperty('status')) {
        this.status = initObj.status
      }
      else {
        this.status = new MotionStatus();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type MotionCommandFeedback
    // Serialize message field [status]
    bufferOffset = MotionStatus.serialize(obj.status, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type MotionCommandFeedback
    let len;
    let data = new MotionCommandFeedback(null);
    // Deserialize message field [status]
    data.status = MotionStatus.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += MotionStatus.getMessageSize(object.status);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'intera_motion_msgs/MotionCommandFeedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'f656201751a37fadfd9bb37aea390db6';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # feedback
    MotionStatus status
    
    
    ================================================================================
    MSG: intera_motion_msgs/MotionStatus
    # motion status
    Header header
    string motion_status
    string current_trajectory
    uint32 current_waypoint
    uint32 motion_request
    
    string MOTION_IDLE=idle
    string MOTION_PENDING=pending
    string MOTION_RUNNING=running
    string MOTION_DONE=done
    string MOTION_PAUSED=paused
    string MOTION_PREEMPTED=preempted
    string MOTION_ERROR=error
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    # 0: no frame
    # 1: global frame
    string frame_id
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new MotionCommandFeedback(null);
    if (msg.status !== undefined) {
      resolved.status = MotionStatus.Resolve(msg.status)
    }
    else {
      resolved.status = new MotionStatus()
    }

    return resolved;
    }
};

module.exports = MotionCommandFeedback;
